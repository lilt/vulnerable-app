pipeline {
    agent any

    options {
        ansiColor('xterm')
        disableConcurrentBuilds(abortPrevious: true)
        //only keep last 5 builds and artifacts
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: '5'))
    }

    environment {
        SONAR_TOKEN = credentials('sonarqube-credentials-token')
    }

    stages {
        stage('Sonarqube Scan') {
            def scannerHome = tool 'sonarqube-lilt';
                withSonarQubeEnv('sonarqube-lilt') {
                sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=test -Dsonar.sources=."
            }
        }
    }
}
